[{"D:\\nauka\\react\\booksearchengine\\src\\index.js":"1","D:\\nauka\\react\\booksearchengine\\src\\App.js":"2"},{"size":222,"mtime":1607085323731,"results":"3","hashOfConfig":"4"},{"size":3535,"mtime":1609701112851,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"pvgp1a",{"filePath":"9","messages":"10","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"D:\\nauka\\react\\booksearchengine\\src\\index.js",[],["12","13"],"D:\\nauka\\react\\booksearchengine\\src\\App.js",["14","15","16","17"],"import { useEffect, useState } from 'react';\nimport './App.css';\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,  \n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\n\nfunction App() {\n  const [books, setBooks] = useState('')\n  const [name, setName] = useState('')\n  const [draft, setDraft] = useState('')\n  const [searched, setSearched] = useState(false)\n  useEffect(()=>{\n    if(name){\n      fetch(`https://www.googleapis.com/books/v1/volumes?q=${name}`)\n      .then(response =>{\n        if(response.ok){\n            return response.json()\n        } else {\n            return Promise.reject(response)\n        }\n       })\n      .then((result) => {\n        setBooks(result.items)\n      })\n      .catch(error => {\n        console.error(\"Błąd pobrania API!\")\n      })}\n      \n  },[name])\n\n\n  const search = () =>{\n    setName(draft)\n  }\n\n  const updateDraft = (event) => {\n    setDraft(event.target.value)\n  }\n\n\n  return (\n\n  \n    <div className=\"App\">   \n        \n         {/*W volumeInfo w API są informacje typu title, author. Ja wcześniej robiłem \n        books ? books.map((book) => <div>{book.volumeInfo.title} <img src={book.volumeInfo.imageLinks.thumbnail} alt=\"Błąd ładowania obrazka\"/></div>) : '' \n        i też działało, ale kolega podpowiedział, że book można pominąć*/}\n      <Router>\n        <div>\n\n          <Route exact path=\"/\">\n             <Main updateDraft={updateDraft} draft={draft} search={search} books={books} />\n          </Route>\n        <Route path=\"/details/:bookId\">\n            <Details books={books}/>\n        </Route>   \n        </div>\n      </Router>\n      </div>\n    \n  );\n}\n\nconst Formularz = (props) =>{\n  return(\n    <div>\n        <input onChange={props.updateDraft} value={props.draft}/>\n        <button onClick={props.search}>Szukaj</button>\n    </div>\n  )\n}\n\nconst Books = (props)=>{\n  return(\n    <div>\n       {props.books ? props.books.map((book) => <div key={book.id}>{book.volumeInfo.title} \n          <img src={book.volumeInfo.imageLinks.smallThumbnail} alt=\"Błąd ładowania obrazka\"/>\n          <Link to={`/details/${book.id}`}>Details</Link>\n       </div>) : '' }\n    </div>\n  )\n}\n\nconst Main = (props)=>{\n  return(\n    <div>\n      <Formularz updateDraft={props.updateDraft} draft={props.draft} search={props.search}/>\n      <Books books={props.books} />\n    </div>\n  )\n}\n\nconst Details = (props) =>{\n  let match = useRouteMatch(\"/details/:bookId\");\n  let myBook = props.books.filter((book) => {\n    return book.id === match.params.bookId\n  })\n  console.log(myBook[0])\n  return(\n    <div>\n      {/*console.log() */}\n      {  /*props.books[0].volumeInfo.info */}\n  \n      {myBook[0].volumeInfo.title ? <p>Tytuł: {myBook[0].volumeInfo.title}</p> : \"\"}\n      {myBook[0].volumeInfo.authors ? <p>Autorzy: {myBook[0].volumeInfo.authors}</p> : \"\"}\n      {myBook[0].volumeInfo.publisher ? <p>Wydawnictwo: {myBook[0].volumeInfo.publisher}</p>: \"\"}\n      {myBook[0].volumeInfo.description ? <p>Opis: {myBook[0].volumeInfo.description}</p> : \"\"}\n      {myBook[0].volumeInfo.publishedDate ? <p>Rok wydania: {myBook[0].volumeInfo.publishedDate}</p> : \"\"}\n      {myBook[0].volumeInfo.avarageRating ? <p>Średnia ocena: {myBook[0].volumeInfo.avarageRating}</p> : \"\"}\n      <img src={myBook[0].volumeInfo.imageLinks.thumbnail} alt=\"Błąd ładowania obrazka\"/>\n    \n    {/* działa props.books ? props.books.map((book) => <div>{book.id == 'AwVt-Ocw2N8C' ? book.volumeInfo.title : ''} </div>) : '' */}\n    </div>\n  )\n}\n\nexport default App;\n",{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","severity":1,"message":"23","line":6,"column":3,"nodeType":"24","messageId":"25","endLine":6,"endColumn":9},{"ruleId":"22","severity":1,"message":"26","line":10,"column":3,"nodeType":"24","messageId":"25","endLine":10,"endColumn":12},{"ruleId":"22","severity":1,"message":"27","line":17,"column":10,"nodeType":"24","messageId":"25","endLine":17,"endColumn":18},{"ruleId":"22","severity":1,"message":"28","line":17,"column":20,"nodeType":"24","messageId":"25","endLine":17,"endColumn":31},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'searched' is assigned a value but never used.","'setSearched' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]