[{"D:\\nauka\\react\\booksearchengine\\src\\index.js":"1","D:\\nauka\\react\\booksearchengine\\src\\App.js":"2"},{"size":222,"mtime":1609778317982,"results":"3","hashOfConfig":"4"},{"size":7100,"mtime":1609845632751,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"pvgp1a",{"filePath":"9","messages":"10","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"D:\\nauka\\react\\booksearchengine\\src\\index.js",[],["12","13"],"D:\\nauka\\react\\booksearchengine\\src\\App.js",["14","15","16","17","18"],"import { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,  \r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [books, setBooks] = useState('')\r\n  const [name, setName] = useState('')\r\n  const [draft, setDraft] = useState('')\r\n  const [errDraft, setErrDraft] = useState('')\r\n  const [searched, setSearched] = useState(false)\r\n  const [dMaxResult, setDMaxResult] = useState('')\r\n  const [maxResult, setMaxResult] = useState('10')\r\n  const [errResult, setErrResult] = useState('')\r\n  useEffect(()=>{\r\n    if(name){\r\n      fetch(`https://www.googleapis.com/books/v1/volumes?q=${name}&maxResults=${maxResult}`)\r\n      .then(response =>{\r\n        if(response.ok){\r\n            return response.json()\r\n        } else {\r\n            return Promise.reject(response)\r\n        }\r\n       })\r\n      .then((result) => {\r\n        setBooks(result.items)\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Błąd pobrania API!\")\r\n      })}\r\n      \r\n  },[name, maxResult])\r\n\r\n\r\n  const search = () =>{\r\n    if(draft){\r\n      setName(draft)\r\n      dMaxResult ? setMaxResult(dMaxResult) : setMaxResult(10)\r\n      setDraft('')\r\n      setDMaxResult('')\r\n      setSearched(true)\r\n    }else{\r\n      setErrDraft('To pole nie może być puste!')\r\n    }\r\n  }\r\n\r\n  const updateDraft = (event) => {\r\n    setDraft(event.target.value)\r\n    setErrDraft('')\r\n  }\r\n\r\n  const updateDResult = (event) => {\r\n    if(event.target.value > 40){\r\n      setDMaxResult(40)\r\n      setErrResult('Maksymalna wartość wynosi 40!')\r\n    }else if(event.target.value < 0){\r\n      setDMaxResult(1)\r\n      setErrResult('Minimalna wartość wynosi 0!')\r\n    }else{\r\n      setDMaxResult(event.target.value)\r\n      setErrResult('')\r\n    }\r\n  }\r\n         {/*W volumeInfo w API są informacje typu title, author. Ja wcześniej robiłem \r\n        books ? books.map((book) => <div>{book.volumeInfo.title} <img src={book.volumeInfo.imageLinks.thumbnail} alt=\"Błąd ładowania obrazka\"/></div>) : '' \r\n        i też działało, ale kolega podpowiedział, że book można pominąć*/}\r\n\r\n  return (\r\n    <div className=\"App\">   \r\n    {/*Mogę dodać coś takiego, że na początku oprócz wyszukiwarki, wyświelta się też, książki o JavaScript i wyświetlić jakieś 5 książek\r\n    Poniżej książki o HTML i wyświetlić 5 książek, a nad tym wszystkim wyszukiwarka i jak coś wyszukam, no to zastępuje te książki\r\n    tymi z wyszukiwania */}\r\n      <Router>\r\n        <div>\r\n        <Link to=\"/\">Home</Link>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Main updateDraft={updateDraft} draft={draft} search={search} books={books} errResult={errResult} updateDResult={updateDResult} dMaxResult={dMaxResult} errDraft={errDraft} searched={searched}/>\r\n          </Route>\r\n          {/* Dla githubpages, bo tam domyślna ścieżka początkowa jest /booksSearchingEngine */}\r\n          <Route exact path=\"/booksSearchingEngine\">\r\n              <Main updateDraft={updateDraft} draft={draft} search={search} books={books} errResult={errResult} updateDResult={updateDResult} dMaxResult={dMaxResult} errDraft={errDraft} searched={searched}/>\r\n          </Route>\r\n          <Route path=\"/details/:bookId\">\r\n              <Details />\r\n          </Route>  \r\n        </Switch> \r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Basic = (props) =>{\r\n  const [defaultBookJs, setDefaultBookJs] = useState('')\r\n  useEffect(()=>{\r\n      fetch(`https://www.googleapis.com/books/v1/volumes?q=javascript&maxResults=5`)\r\n      .then(response =>{\r\n        if(response.ok){\r\n            return response.json()\r\n        } else {\r\n            return Promise.reject(response)\r\n        }\r\n       })\r\n      .then((result) => {\r\n        setDefaultBookJs(result.items)\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Błąd pobrania API!\")\r\n      })   \r\n  },[])\r\n  /*Pusta tablica jako argument sprawi, że useEffect wywoła się tylko za pierwszym razem */\r\n  return(\r\n    <div>\r\n      Tu na razie jest ściernisko\r\n      {defaultBookJs ? defaultBookJs.map((book) => <div key={book.id}>{book.volumeInfo.title} \r\n          <img src={book.volumeInfo.imageLinks.smallThumbnail} alt=\"Błąd ładowania obrazka\"/>\r\n          <Link to={`/details/${book.id}`}>Details</Link>\r\n       </div>) : '' }\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Formularz = (props) =>{\r\n  return(\r\n    <div>\r\n        <input onChange={props.updateDraft} value={props.draft}/>\r\n        {props.errDraft ? props.errDraft : ''}\r\n        <p>Podaj ile książek chcesz wyszukać:</p>\r\n        <input onChange={props.updateDResult} value={props.dMaxResult}/>\r\n        {props.errResult ? props.errResult : ''}\r\n        <button onClick={props.search}>Szukaj</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Books = (props)=>{\r\n  return(\r\n    <div>\r\n       {props.books ? props.books.map((book) => <div key={book.id}>{book.volumeInfo.title} \r\n          <img src={book.volumeInfo.imageLinks.smallThumbnail} alt=\"Błąd ładowania obrazka\"/>\r\n          <Link to={`/details/${book.id}`}>Details</Link>\r\n       </div>) : '' }\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Main = (props)=>{\r\n  return(\r\n    <div>\r\n      <Formularz updateDraft={props.updateDraft} draft={props.draft} search={props.search} errResult={props.errResult} updateDResult={props.updateDResult} dMaxResult={props.dMaxResult} errDraft={props.errDraft}/>\r\n      {!props.searched ? <Basic /> : ''}\r\n      <Books books={props.books} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Details = (props) =>{\r\n  let match = useRouteMatch(\"/details/:bookId\");\r\n  const [searchedBook, setSearchedBook] = useState('')\r\n  const [loaded, setLoaded] = useState(false)\r\n  useEffect(()=>{\r\n      fetch(`https://www.googleapis.com/books/v1/volumes?q=${match.params.bookId}`)\r\n      .then(response =>{\r\n        if(response.ok){\r\n            return response.json()\r\n        } else {\r\n            return Promise.reject(response)\r\n        }\r\n       })\r\n      .then((result) => {\r\n        setSearchedBook(result.items)\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Błąd pobrania API!\")\r\n      })\r\n      },[])\r\n\r\n  return(\r\n    <div>\r\n      \r\n      {searchedBook[0]?.volumeInfo.title ? <p>Tytuł: {searchedBook[0]?.volumeInfo.title}</p> : \"\"}\r\n      {searchedBook[0]?.volumeInfo.authors ? <p>Autorzy: {searchedBook[0]?.volumeInfo.authors}</p> : \"\"}\r\n      {searchedBook[0]?.volumeInfo.publisher ? <p>Wydawnictwo: {searchedBook[0]?.volumeInfo.publisher}</p>: \"\"}\r\n      {searchedBook[0]?.volumeInfo.description ? <p>Opis: {searchedBook[0]?.volumeInfo.description}</p> : \"\"}\r\n      {searchedBook[0]?.volumeInfo.publishedDate ? <p>Rok wydania: {searchedBook[0]?.volumeInfo.publishedDate}</p> : \"\"}\r\n      {searchedBook[0]?.volumeInfo.avarageRating ? <p>Średnia ocena: {searchedBook[0]?.volumeInfo.avarageRating}</p> : \"\"}\r\n      {searchedBook[0]?.volumeInfo.imageLinks.thumbnail ? <img src={searchedBook[0]?.volumeInfo.imageLinks.thumbnail} alt=\"Błąd ładowania obrazka\"/> : \"\"}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":10,"column":3,"nodeType":"25","messageId":"26","endLine":10,"endColumn":12},{"ruleId":"27","severity":1,"message":"28","line":71,"column":10,"nodeType":"29","messageId":"30","endLine":73,"endColumn":75},{"ruleId":"23","severity":1,"message":"31","line":168,"column":10,"nodeType":"25","messageId":"26","endLine":168,"endColumn":16},{"ruleId":"23","severity":1,"message":"32","line":168,"column":18,"nodeType":"25","messageId":"26","endLine":168,"endColumn":27},{"ruleId":"33","severity":1,"message":"34","line":184,"column":9,"nodeType":"35","endLine":184,"endColumn":11,"suggestions":"36"},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'loaded' is assigned a value but never used.","'setLoaded' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'match.params.bookId'. Either include it or remove the dependency array.","ArrayExpression",["39"],"no-global-assign","no-unsafe-negation",{"desc":"40","fix":"41"},"Update the dependencies array to be: [match.params.bookId]",{"range":"42","text":"43"},[6113,6115],"[match.params.bookId]"]